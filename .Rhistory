mean(min_branch)
paste("chr",0)
paste("chr","0")
?paste
paste0("chr",0)
hist(min_branch)
mfrow = c(2,8)
mfrow = c(2,8)
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
hist(min_branch, main = paste0("chr",y), xlab = "branch length")
}
par(mfrow = c(2,8))
par(mfrow = c(2,8))
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
hist(min_branch, main = paste0("chr",y), xlab = "branch length")
}
par(mfrow = c(4,4))
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
hist(min_branch, main = paste0("chr",y), xlab = "branch length")
}
par(mfrow = c(4,4))
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
hist(min_branch, main = paste0("chr",y), xlab = "min branch length")
}
par(mfrow = c(4,4))
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
hist(branch, main = paste0("chr",y), xlab = "branch length")
}
par(mfrow = c(4,4))
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
boxplot(branch, main = paste0("chr",y), xlab = "branch length")
}
mean(branch)
box_mat = matrix(, nrow = 0, ncol = 2)
rbind(c(1,2),c(3,4))
cbind(c(1,2),c(3,4))
box_mat = matrix(, nrow = 0, ncol = 2)
par(mfrow = c(4,4))
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
rbind(box_mat, cbind(min_branch,rep(y,lenght(min_branch))))
boxplot(branch, main = paste0("chr",y), xlab = "branch length")
}
box_mat = matrix(, nrow = 0, ncol = 2)
par(mfrow = c(4,4))
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
rbind(box_mat, cbind(min_branch,rep(y,length(min_branch))))
boxplot(branch, main = paste0("chr",y), xlab = "branch length")
}
nrow(box_mat)
box_mat = matrix(, nrow = 0, ncol = 2)
par(mfrow = c(4,4))
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
box_mat = rbind(box_mat, cbind(min_branch,rep(y,length(min_branch))))
boxplot(branch, main = paste0("chr",y), xlab = "branch length")
}
nrow(box_mat)
boxplot(as.data.frame(box_mat))
?as.data.frame
boxplot(as.data.frame(box_mat, col.names = c("branch","chr")))
boxplot(branch~chr, as.data.frame(box_mat, col.names = c("branch","chr")))
boxplot(branch~chr, data = as.data.frame(box_mat, col.names = c("branch","chr")))
as.data.frame(box_mat, col.names = c("branch","chr"))
boxplot(min_branch~V2, data = as.data.frame(box_mat))
par(mfrow = c(1,1))
par(mfrow = c(1,1))
boxplot(min_branch~V2, data = as.data.frame(box_mat))
boxplot(min_branch~V2, data = as.data.frame(box_mat), xlab = "chromosome", main = "minimum branch length")
boxplot(min_branch~V2, data = as.data.frame(box_mat), xlab = "chromosome", main = "minimum branch length", ylab = "branch length")
box_mat = matrix(, nrow = 0, ncol = 2)
par(mfrow = c(1,1))
for (y in 1:16){
hap_4k_0_10 = hap_4k_0[(hap_4k_0[,2] == paste0("chr",y)),]
hap_4k_6_10 = hap_4k_6[(hap_4k_6[,2] == paste0("chr",y)),]
snp_4k_10 = snp_4k[(snp_4k[,1]==paste0("chr",y)),]
#window 207
branch = c()
min_branch = c()
for( x in 1:nrow(hap_4k_0_10)){
print(x)
snp_4k_10_filt = snp_4k_10[(snp_4k_10[,2]>=hap_4k_0_10[x,3]),]
snp_4k_10_filt = snp_4k_10_filt[(1:hap_4k_0_10[x,4]),]
hap_struc = as.matrix(round(snp_4k_10_filt[,c(5,7,9,11)]))
hap_struc = hap_struc[!rowSums(is.na(hap_struc)),]
similarity_matrix = matrix(0,nrow = 4,ncol = 4)
for (i in 1:4){
for (j in 1:4){
similarity_matrix[i,j] = sum(abs(hap_struc[,i]-hap_struc[,j]))/nrow(hap_struc)
}
}
dist.similarity = as.dist(similarity_matrix)
tree = phangorn::upgma(dist.similarity)
branch = c(branch, tree$edge.length)
min_branch = c(min_branch, min(tree$edge.length))
}
box_mat = rbind(box_mat, cbind(branch,rep(y,length(branch))))
boxplot(branch, main = paste0("chr",y), xlab = "branch length")
}
boxplot(branch~V2, data = as.data.frame(box_mat), xlab = "chromosome", main = "minimum branch length", ylab = "branch length")
boxplot(branch~V2, data = as.data.frame(box_mat), xlab = "chromosome", main = "branch length", ylab = "branch length")
rpois(7, lambda = 50)
rep(rpois(7, lambda = 50),4)
as.matrix(rep(rpois(7, lambda = 50),4),ncol = 7)
matrix(rep(rpois(7, lambda = 50),4),ncol = 7)
?matrix
matrix(rep(rpois(7, lambda = 50),4),ncol = 7, byrow = TRUE)
dim(matrix(c(1,2,3,4),nrow = 2))
dim(matrix(c(1,2,3,4),nrow = 2))=dim(matrix(c(1,2,3,4),nrow = 2))
a = 0
if (a != 0 | a !=1){
return("???")
}
if (a != 0 | a !=1){
return("???")
}
if (a != 0 | a !=1){
print("???")
}
if (a != 0 & a !=1){
print("???")
}
if (a != 2 & a !=1){
print("???")
}
?select()
?select
library("devtools")
install.packages("devtools")
library(roxygen2)
library("devtools")
setwd("..")
setwd("./haplotest")
document()
document()
install("haplotest")
setwd("..")
install("haplotest")
setwd("./haplotest")
document()
document()
document()
document()
setwd("..")
install("haplotest")
?haplotest
hap_struc = Haplotype_sim(nsnp = 500,nhap = 5)
SNP_sel = benef_sim(haplotype = hap_struc, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 1)
hap_freq = Frequency_sim(haplotyp = hap_struce, t = 6, tdelta = 10, benef_sim = SNP_sel,Ne = 500)[[1]]
#Computation of p-value using basic haplotype based test and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "base", p_combine_method = "omnibus", freq_est = "known")
setwd("./haplotest")
document()
install("haplotest")
setwd("..")
install("haplotest")
?haplotest
setwd("..")
install("haplotest")
library("devtools")
install("haplotest")
?haplotest
?haplotest()
library(haplotest)
?haplotest()
detach("package:haplotest", unload=TRUE)
install("haplotest")
library("haplotest")
?haplotest
remove.packages("haplotest")
install("haplotest")
setwd("..")
install("haplotest")
setwd("..")
library("devtools")
install("haplotest")
?haplotest
library("haplotest")
?haplotest
#Simulate haplotype structure with 500 SNPs and 5 haplotypes:
hap_struc = Haplotype_sim(nsnp = 500,nhap = 5)
#Simulation of selected SNP, with 1 selected SNP private to 1 haplotype, 1 population and 0.05 selective strength:
SNP_sel = benef_sim(haplotype = hap_struc, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 1)
#Simulation of haplotype trajectory, 60 generations, sequenced at every 10 timepoints, Ne of 500:
hap_freq = Frequency_sim(haplotype = hap_struc, t = 6, tdelta = 10, benef_sim = SNP_sel,Ne = 500)[[1]]
#Computation of p-value using basic haplotype based test and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "base", p_combine_method = "omnibus", freq_est = "known")
setwd("./haplotest")
document()
remove.packages("haplotest")
library("devtools")
setwd("..")
install("haplotest")
library("haplotest")
?haplotest
#Simulate haplotype structure with 500 SNPs and 5 haplotypes:
hap_struc = Haplotype_sim(nsnp = 500,nhap = 5)
#Simulation of selected SNP, with 1 selected SNP private to 1 haplotype, 1 population and 0.05 selective strength:
SNP_sel = benef_sim(haplotype = hap_struc, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 1)
#Simulation of haplotype trajectory, 60 generations, sequenced at every 10 timepoints, Ne of 500:
hap_freq = Frequency_sim(haplotype = hap_struc, t = 6, tdelta = 10, benef_sim = SNP_sel,Ne = 500)[[1]]
#Computation of p-value using basic haplotype based test and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "base", p_combine_method = "omnibus", freq_est = "known")
#In addition to the previous simulations, we need to compute the allele frequencies:
allele_freq = hap_struc %*% hap_freq
#Computation of p-value using HapSNP and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, allele_frequency = allele_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "hap_filt", p_combine_method = "omnibus", freq_est = "known")
library(omnibus)
#Simulate haplotype structure with 500 SNPs and 5 haplotypes:
hap_struc = Haplotype_sim(nsnp = 500,nhap = 5)
#Simulation of selected SNP, with 1 selected SNP private to 1 haplotype, 1 population and 0.05 selective strength:
SNP_sel = benef_sim(haplotype = hap_struc, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 1)
#Simulation of haplotype trajectory, 60 generations, sequenced at every 10 timepoints, Ne of 500:
hap_freq = Frequency_sim(haplotype = hap_struc, t = 6, tdelta = 10, benef_sim = SNP_sel,Ne = 500)[[1]]
#Computation of p-value using basic haplotype based test and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "base", p_combine_method = "omnibus", freq_est = "known")
remove.packages("haplotest")
setwd("./haplotest")
document()
library("devtools")
setwd("..")
library("haplotest")
install("haplotest")
library("haplotest")
?haplotest()
#Simulate haplotype structure with 500 SNPs and 5 haplotypes:
hap_struc = Haplotype_sim(nsnp = 500,nhap = 5)
#Simulation of selected SNP, with 1 selected SNP private to 1 haplotype, 1 population and 0.05 selective strength:
SNP_sel = benef_sim(haplotype = hap_struc, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 1)
#Simulation of haplotype trajectory, 60 generations, sequenced at every 10 timepoints, Ne of 500:
hap_freq = Frequency_sim(haplotype = hap_struc, t = 6, tdelta = 10, benef_sim = SNP_sel,Ne = 500)[[1]]
#Computation of p-value using basic haplotype based test and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "base", p_combine_method = "omnibus", freq_est = "known")
?omnibus.test
?omnibus
remove.packages("haplotest")
library("devtools")
setwd("..")
setwd("./haplotest")
document()
document()
setwd("..")
install(haplotest)
install("haplotest")
library("haplotest")
?haplotest
#Simulate haplotype structure with 500 SNPs and 5 haplotypes:
hap_struc = Haplotype_sim(nsnp = 500,nhap = 5)
#Simulation of selected SNP, with 1 selected SNP private to 1 haplotype, 1 population and 0.05 selective strength:
SNP_sel = benef_sim(haplotype = hap_struc, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 1)
#Simulation of haplotype trajectory, 60 generations, sequenced at every 10 timepoints, Ne of 500:
hap_freq = Frequency_sim(haplotype = hap_struc, t = 6, tdelta = 10, benef_sim = SNP_sel,Ne = 500)[[1]]
#Computation of p-value using basic haplotype based test and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "base", p_combine_method = "omnibus", freq_est = "known")
#In addition to the previous simulations, we need to compute the allele frequencies:
allele_freq = hap_struc %*% hap_freq
remove.packages("omnibus")
devtools::install_github("ThomasTaus/omnibus")
library(omnibus)
devtools::install_github("danny-wilson/harmonicmeanp")
detach("package:omnibus", unload=TRUE)
library("omnibus")
remove.packages("haplotest")
library("devtools")
setwd("..")
setwd("./")
setwd("./haplotest")
setwd("..")
setwd("./haplotest")
document()
setwd("..")
install("haplotest")
library(haplotest)
library(omnibus)
library(harmonicmeanp)
#Simulate haplotype structure with 500 SNPs and 5 haplotypes:
hap_struc = Haplotype_sim(nsnp = 500,nhap = 5)
#Simulation of selected SNP, with 1 selected SNP private to 1 haplotype, 1 population and 0.05 selective strength:
SNP_sel = benef_sim(haplotype = hap_struc, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 1)
#Simulation of haplotype trajectory, 60 generations, sequenced at every 10 timepoints, Ne of 500:
hap_freq = Frequency_sim(haplotype = hap_struc, t = 6, tdelta = 10, benef_sim = SNP_sel,Ne = 500)[[1]]
#Computation of p-value using basic haplotype based test and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "base", p_combine_method = "omnibus", freq_est = "known")
#In addition to the previous simulations, we need to compute the allele frequencies:
allele_freq = hap_struc %*% hap_freq
#Computation of p-value using HapSNP and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, allele_frequency = allele_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "hap_filt", p_combine_method = "omnibus", freq_est = "known")
#Simulation of noisy haplotype frequencies with mean samplesize 80:
hap_freq_est = hap_err_sim(hap_freq, 80)
#Computation of p-value using basic haplotype based test and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq_est[[1]], coverage_matrix = hap_freq_est[[2]], deltat = 10, Ne = 500, test_type = "haplotype", test_method = "base", p_combine_method = "omnibus", freq_est = "est")
pval
#Simulate haplotype structure with 500 SNPs and 5 haplotypes:
hap_struc = Haplotype_sim(nsnp = 500,nhap = 5)
#Simulation of selected SNP, with 1 selected SNP private to 1 haplotype, 1 population and 0.05 selective strength:
SNP_sel = benef_sim(haplotype = hap_struc, n_benef = 1, min = 0.05, max = 0.05, fix_sel = 1)
#Simulation of haplotype trajectory, 60 generations, sequenced at every 10 timepoints, Ne of 500:
hap_freq = Frequency_sim(haplotype = hap_struc, t = 6, tdelta = 10, benef_sim = SNP_sel,Ne = 500)[[1]]
#Computation of p-value using basic haplotype based test and omnibus p-value combination method:
pval = haplotest(haplotype = hap_struc, haplotype_frequency = hap_freq, deltat = 10, Ne = 500, test_type = "haplotype", test_method = "base", p_combine_method = "omnibus", freq_est = "known")
pval
hap_freq
pval
remove.packages("haplotest")
remove.packages("omnibus")
remove.packages("harmonicmeanp")
setwd("..")
