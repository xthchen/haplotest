test2 = Frequency_sim(True_hap[,sam], benef_sim = test1, t = 6, Ne = 1000,repli = repli)
test3 = adapted.cmh.test.true(test2[[1]], Ne = Ne, gen = seq(0,60,10), repli = repli)
#test4 = omnibus.test(test3, method = "log.p", N.sim = 1000)
test4 = hmp.stat(test3)
if (test4 > 0.05){
test_result = c(test_result, 0)
}else{
test4_mod = 0
curr_sel = 1
test2_mod = test2[[1]]
nrm_fq = test2[[1]]
new_hap = True_hap[,sam]
if (!is.matrix(Ne)){
new_ne = matrix(rep(Ne, 7), ncol = repli)
}else{
new_ne = Ne
}
repli_gen = seq(1,repli*7,7)
while (test4_mod < 0.05){
if (curr_sel < 4){
max_diff_repli = rep(0,nrow(test2_mod))
for(z in 1:repli){
f_0 = nrm_fq[,repli_gen[z]]
#starting frequencies
t_T = repli_gen[z]+7-1
#last timepoint
f_T = nrm_fq[,t_T]
hm_Ne = floor(2/(1/new_ne[-length(new_ne[,z]),z]+1/new_ne[-1,z]))
diff = f_T - f_0
drift = rowSums(nrm_fq[,(repli_gen[z]:(t_T-1))]*(1-nrm_fq[,(repli_gen[z]:(t_T-1))])*
matrix(rep(1-(1-1/hm_Ne)^(gen[-1]-gen[-7]),nrow(nrm_fq)), nrow = nrow(nrm_fq), byrow = TRUE))
max_diff_repli = max_diff_repli + diff/sqrt(drift)
}
test2_mod = nrm_fq[-which.max(max_diff_repli),]
tot_ne = c()
for(z in 1:repli){
ne_hold = c()
for (v in 1:7){
ne_hold = c(ne_hold, floor(sum(test2_mod[,7*(z-1)+v])*new_ne[v,z]))
}
tot_ne = cbind(tot_ne, ne_hold)
}
new_ne = tot_ne
#new ne after frequency removal
for (x in 1:ncol(test2_mod)){
if (sum(test2_mod[,x]) == 0){
test2_mod[,x] = rep(1/nrow(test2_mod), nrow(test2_mod))
}else{
test2_mod[,x] = (1/sum(test2_mod[,x]))*test2_mod[,x]
}
}
#normalisation of frequencies after removal
nrm_fq = test2_mod
for(z in 1:repli){
for(v in 1:7)
if(new_ne[v,z] == 0){
new_ne[v,z] = 1
}
}
hap_re = adapted.cmh.test.true(nrm_fq, Ne = new_ne, gen = seq(0,60,10), repli = repli)
if (any(is.nan(hap_re))){
hap_re = rep(1,length(hap_re))
}
#test4_mod = omnibus.test(hap_re,method = "log.p", N.sim = 1000)
test4_mod = hmp.stat(hap_re)
if (test4_mod>0.05){
test_result = c(test_result,curr_sel)
}else{
curr_sel = curr_sel+1
}
}else{
test_result = c(test_result,4)
test4_mod = 1
}
}
}
}
pre = c()
for (x in 0:4){
for (y in 0:4){
count = 0
for(i in 1:50000){
if(label[i] == x & test_result[i] ==y){
count = count +1
}
}
pre = c(pre,count)
}
}
count
matrix_1 = data.frame(true = c("0","0","0","0","0","1","1","1","1","1", "2","2","2","2","2",
"3","3","3","3","3","4","4","4","4","4"),
predicted = c("0","1", "2","3","4","0","1", "2","3","4","0","1", "2","3","4",
"0","1", "2","3","4","0","1", "2","3","4"),
freq = pre)
ggplot(data = matrix_1, aes(x=predicted, y=true, fill=freq)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red", limits=c(0, 10000)) +
geom_text(aes(label = round(freq, 1)))
rnorm(100,mean = 0)
pop1 = rnorm(100,mean = 0)
pop2 = rnorm(100,mean = -1)
pop3 = rnorm(100,mean = -2)
pop4 = rnorm(100,mean = -3)
pop5 = rnorm(100,mean = -4)
loc = c(rep(0,100),rep(-1,100),rep(-2,100),rep(-3,100),rep(-4,100))
data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
aov(sample~location,data = data_norm)
aov(location~sample,data = data_norm)
View(data_norm)
mod = aov(sample~location,data = data_norm)
summary(mod)
install.packages('StatCharrms')
oneWayDunnettTest(Data=data_norm, Treatment='sample', Response='location',
WeightList = NULL, TestDirection = "Decreasing")
library("StatCharrms")
mod = aov(sample~location,data = data_norm)
summary(mod)
View(data_norm)
DunnettTest(x=data_norm$sample, g=data_norm$location)
library(DescTools)
DunnettTest(x=data_norm$sample, g=data_norm$location)
DunnettTest(x=data_norm$sample, g=data_norm$location)$0
DunnettTest(x=data_norm$sample, g=data_norm$location)$"0"
data_norm$location
i = 1
sample[(i*100+1):(i+1)*100]
(i*100+1):(i+1)*100
(i*100+1):((i+1)*100)
paste0("raster[", 0, "]")
paste0("raster", 0)
mean(pop1)
mean("pop1")
paste0(pop, 0)
paste0("pop", 0)
as.numeric(paste0("pop", 0))
class(pop1)
mean(pop1,pop2)
s = 0
for (i in 1:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop2),mean(pop3),mean(pop4),mean(pop5)[i]))^2)
}
s
data_norm$sample[(i*100+1):((i+1)*100)]
c(mean(pop2),mean(pop3),mean(pop4),mean(pop5)[i]
)
mean(pop5)
c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]
s = 0
for (i in 1:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i])^2)
}
s
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i])^2)
}
s = s/((100-(4+1))*5)
s
((100-(4+1))*5)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
s = s/((100-(4+1))*5)
s
sqrt(s*2/100)
(mean(pop2)-mean(pop1))/sqrt(s*2/100)
n = ((100-(4+1))*5)
n
pt(-0.617, df = n)
pt(-0.617, df = n,lower.tail = TRUE)
pt(-0.617, df = n,lower.tail = FASLE)
pt(-0.617, df = n,lower.tail = FALSE)
(mean(pop3)-mean(pop1))/sqrt(s*2/100)
pt(-6.17, df = n,lower.tail = FALSE)
pt(-6.17, df = n)
pt(-15.17, df = n)
pval = c()
for (i in 1:4){
pval = (c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/100)
}
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/100),df = n))
}
pval
pop1 = rnorm(100,mean = -5)
loc = c(rep(0,100),rep(-1,100),rep(-2,100),rep(-3,100),rep(-4,100))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((100-(4+1))*5)
s = s/n
(mean(pop3)-mean(pop1))/sqrt(s*2/100)
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/100),df = n))
}
pval
pop1 = rnorm(100,mean = -4)
pop2 = rnorm(100,mean = -1)
pop3 = rnorm(100,mean = -2)
pop4 = rnorm(100,mean = -3)
pop5 = rnorm(100,mean = -4)
loc = c(rep(0,100),rep(-1,100),rep(-2,100),rep(-3,100),rep(-4,100))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((100-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/100),df = n))
}
pval
comb_pval = p.adjust(pval, method = "BH")
comb_pval
pop1 = rnorm(100,mean = 0)
pop2 = rnorm(100,mean = -1)
pop3 = rnorm(100,mean = -2)
pop4 = rnorm(100,mean = -3)
pop5 = rnorm(100,mean = -4)
loc = c(rep(0,100),rep(-1,100),rep(-2,100),rep(-3,100),rep(-4,100))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((100-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/100),df = n))
}
comb_pval = min(p.adjust(pval, method = "BH"))
comb_pval
pop1 = rnorm(100,mean = 0)
pop2 = rnorm(100,mean = -1)
pop3 = rnorm(100,mean = -2)
pop4 = rnorm(100,mean = -3)
pop5 = rnorm(100,mean = -4)
loc = c(rep(0,100),rep(-1,100),rep(-2,100),rep(-3,100),rep(-4,100))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((100-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/100),df = n))
}
comb_pval = min(p.adjust(pval, method = "BH"))
comb_pval
pop1 = rnorm(100,mean = 0)
pop2 = rnorm(100,mean = -1)
pop3 = rnorm(100,mean = -2)
pop4 = rnorm(100,mean = -3)
pop5 = rnorm(100,mean = -4)
loc = c(rep(0,100),rep(-1,100),rep(-2,100),rep(-3,100),rep(-4,100))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((100-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/100),df = n, lower.tail = FALSE))
}
comb_pval = min(p.adjust(pval, method = "BH"))
comb_pval
count = 0
for (j in 1:10000){
pop1 = rnorm(100,mean = 0)
pop2 = rnorm(100,mean = -1)
pop3 = rnorm(100,mean = -2)
pop4 = rnorm(100,mean = -3)
pop5 = rnorm(100,mean = -4)
loc = c(rep(0,100),rep(-1,100),rep(-2,100),rep(-3,100),rep(-4,100))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((100-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/100),df = n, lower.tail = FALSE))
}
comb_pval = min(p.adjust(pval, method = "BH"))
if (comb_pval < 0.05){
count = count+1
}
}
count = 0
for (j in 1:10000){
print(j)
set.seed(j)
pop1 = rnorm(100,mean = 0)
pop2 = rnorm(100,mean = -1)
pop3 = rnorm(100,mean = -2)
pop4 = rnorm(100,mean = -3)
pop5 = rnorm(100,mean = -4)
loc = c(rep(0,100),rep(-1,100),rep(-2,100),rep(-3,100),rep(-4,100))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*100+1):((i+1)*100)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((100-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/100),df = n, lower.tail = FALSE))
}
comb_pval = min(p.adjust(pval, method = "BH"))
if (comb_pval < 0.05){
count = count+1
}
}
count
count = 0
for (j in 1:10000){
print(j)
set.seed(j)
pop1 = rnorm(10,mean = 0)
pop2 = rnorm(10,mean = -1)
pop3 = rnorm(10,mean = -2)
pop4 = rnorm(10,mean = -3)
pop5 = rnorm(10,mean = -4)
loc = c(rep(0,10),rep(-1,10),rep(-2,10),rep(-3,10),rep(-4,10))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*10+1):((i+1)*10)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((10-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/10),df = n, lower.tail = FALSE))
}
comb_pval = min(p.adjust(pval, method = "BH"))
if (comb_pval < 0.05){
count = count+1
}
}
count
comb_pval
count = 0
for (j in 1:10000){
print(j)
set.seed(j)
pop1 = rnorm(10,mean = -1)
pop2 = rnorm(10,mean = -1)
pop3 = rnorm(10,mean = -2)
pop4 = rnorm(10,mean = -3)
pop5 = rnorm(10,mean = -4)
loc = c(rep(0,10),rep(-1,10),rep(-2,10),rep(-3,10),rep(-4,10))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*10+1):((i+1)*10)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((10-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/10),df = n, lower.tail = FALSE))
}
comb_pval = min(p.adjust(pval, method = "BH"))
if (comb_pval < 0.05){
count = count+1
}
}
count
count = 0
for (j in 1:10000){
print(j)
set.seed(j)
pop1 = rnorm(10,mean = -1)
pop2 = rnorm(10,mean = -1)
pop3 = rnorm(10,mean = -1)
pop4 = rnorm(10,mean = -1)
pop5 = rnorm(10,mean = -4)
loc = c(rep(0,10),rep(-1,10),rep(-2,10),rep(-3,10),rep(-4,10))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*10+1):((i+1)*10)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((10-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/10),df = n, lower.tail = FALSE))
}
comb_pval = min(p.adjust(pval, method = "BH"))
if (comb_pval < 0.05){
count = count+1
}
}
count
count = 0
for (j in 1:10000){
print(j)
set.seed(j)
pop1 = rnorm(10,mean = -1)
pop2 = rnorm(10,mean = -1)
pop3 = rnorm(10,mean = -1)
pop4 = rnorm(10,mean = -1)
pop5 = rnorm(10,mean = -2)
loc = c(rep(0,10),rep(-1,10),rep(-2,10),rep(-3,10),rep(-4,10))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*10+1):((i+1)*10)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((10-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/10),df = n, lower.tail = FALSE))
}
comb_pval = min(p.adjust(pval, method = "BH"))
if (comb_pval < 0.05){
count = count+1
}
}
count
count = 0
for (j in 1:10000){
print(j)
set.seed(j)
pop1 = rnorm(10,mean = -2)
pop2 = rnorm(10,mean = -1)
pop3 = rnorm(10,mean = -1)
pop4 = rnorm(10,mean = -1)
pop5 = rnorm(10,mean = -2)
loc = c(rep(0,10),rep(-1,10),rep(-2,10),rep(-3,10),rep(-4,10))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*10+1):((i+1)*10)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((10-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/10),df = n, lower.tail = FALSE))
}
comb_pval = min(p.adjust(pval, method = "BH"))
if (comb_pval < 0.05){
count = count+1
}
}
count
count = 0
for (j in 1:10000){
print(j)
set.seed(j)
pop1 = rnorm(10,mean = -1)
pop2 = rnorm(10,mean = -1)
pop3 = rnorm(10,mean = -1)
pop4 = rnorm(10,mean = -1)
pop5 = rnorm(10,mean = -1)
loc = c(rep(0,10),rep(-1,10),rep(-2,10),rep(-3,10),rep(-4,10))
data_norm = data.frame(sample = c(pop1,pop2,pop3,pop4,pop5), location = loc)
s = 0
for (i in 0:4){
s = s + sum((data_norm$sample[(i*10+1):((i+1)*10)]-c(mean(pop1),mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i+1])^2)
}
n = ((10-(4+1))*5)
s = s/n
pval = c()
for (i in 1:4){
pval = c(pval,pt((c(mean(pop2),mean(pop3),mean(pop4),mean(pop5))[i]-mean(pop1))/sqrt(s*2/10),df = n, lower.tail = FALSE))
}
comb_pval = min(p.adjust(pval, method = "BH"))
if (comb_pval < 0.05){
count = count+1
}
}
count
setwd("./haplotest")
setwd("..")
setwd("./haplotest")
document()
library("devtools")
library(roxygen2)
document()
setwd("..")
setwd("./haplotest")
document()
document()
rm(list = c("adapted.cmh.test.est", "adapted.cmh.test.est.pool", "adapted.cmh.test.true", "benef_sim", "Frequency_sim", "hap_err_sim", "hap_snp_red", "haplotest"))
document()
document()
install.pacakages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
